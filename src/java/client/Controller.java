package waypoint.client;

import src.java.client*;
import javax.swing.*;
import java.io.*;
import javax.swing.event.*;
import javax.swing.text.html.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;

import java.io.PrintWriter;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;

/**
 * Copyright (c) 2018 Tim Lindquist,
 * Software Engineering,
 * Arizona State University at the Polytechnic campus
 * <p/>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation version 2
 * of the License.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but without any warranty or fitness for a particular purpose.
 * <p/>
 * Please review the GNU General Public License at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 * see also: https://www.gnu.org/licenses/gpl-faq.html
 * so you are aware of the terms and your rights with regard to this software.
 * Or, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,USA
 * <p/>
 * Purpose: Java client UI for Waypoint management.
 * This class creates Gui components for a UI to manage waypoints.
 * This software is meant to run on OSX, and Windows Cygwin using g++.
 * SampleAssign2 demonstrates use of the WaypointGUI class
 * for solving ser321 assignments.
 * WaypointGUI class uses Swing components JTextField, JComboBox, and
 * JTextArea to realize a GUI for Waypoint management. 
 * <p/>
 * Ser321 Principles of Distributed Software Systems.
 * see http://pooh.poly.asu.edu/Ser321
 * @author Tim Lindquist (Tim.Lindquist@asu.edu) CIDSE - Software Engineering
 *                       Ira Fulton Schools of Engineering, ASU Polytechnic
 * @file    WaypointGUI.java
 * @date    January, 2018
 * @license See above
 */
public class Controller extends WaypointGUI implements ActionListener, ItemListener {

   private static final boolean debugOn = true;
   private Waypoint[] WptLib = new Waypoint[100];
   private Waypoint wptHolder = new Waypoint("", "", 0, 0, 0);
   private Waypoint wpt;
   private Waypoint modWpt;
   private static int i = 0;
   private static double ele;
   private static double lat;
   private static double lon;

   public Controller(String base) {
      super(base);
      removeWPButt.addActionListener(this);
      addWPButt.addActionListener(this);
      modWPButt.addActionListener(this);
      importButt.addActionListener(this);
      exportButt.addActionListener(this);
      distBearButt.addActionListener(this);
      frWps.addItemListener(this);
      toWps.addItemListener(this);
      
      for(int i = 0; i < 50 ; i++)
      {
         WptLib[i] = new Waypoint("", "", 0, 0, 0);
      }

      this.addWindowListener(new WindowAdapter() {
         @Override
         public void windowClosing(WindowEvent e) {
            debug("you clicked X");
            System.exit(0);
         }
      });

      setVisible(true);
   }

   public void itemStateChanged(ItemEvent event){
      if(event.getStateChange() == ItemEvent.SELECTED){
         Object comp = event.getSource();
         debug("Selection event generated by "+
                            ((comp==frWps)?"from ":"to ")+"combobox. "+
                            "Selected waypoint is: "+(String)event.getItem());
      }
   }

   public void actionPerformed(ActionEvent e) {
      if(e.getActionCommand().equals("Remove")) {
         debug("you clicked Remove Waypoint");
         //remove from vector lib
         for(i = 0; i < WptLib.length; i++){
	    if(toWps.getSelectedItem() == frWps.getSelectedItem()){
               if(WptLib[i].name == toWps.getSelectedItem()) {
                  WptLib[i] = wptHolder; 
               }
            }
	}
        print();
        frWps.removeItem(frWps.getSelectedItem());
        toWps.removeItem(toWps.getSelectedItem());
      }else if(e.getActionCommand().equals("Add")) {
         debug("you clicked Add Waypoint");
         //add to vector lib
	 boolean found = false;
         for(i = 0; i < WptLib.length; i++){
            if (WptLib[i].name == nameIn.getText()) {
               found = true;
            }
         }
         if (!found) { 
            ele = Double.parseDouble(eleIn.getText());
            lat = Double.parseDouble(latIn.getText());
            lon = Double.parseDouble(lonIn.getText());
            for(i = 0; i < WptLib.length; i++){
               if(WptLib[i].name == "") {
                  wpt = new Waypoint(nameIn.getText(), addrIn.getText(), ele, lat, lon);
                  WptLib[i] = wpt;
                  break;
               }
            }
            frWps.addItem(nameIn.getText());
            toWps.addItem(nameIn.getText());
	    nameIn.setText("name");
	    addrIn.setText("addr");
	    eleIn.setText("ele");
            latIn.setText("lat");
            lonIn.setText("lon");
            ele = 0;
	    lat = 0;
	    lon = 0;
            print();
         }
         distBearIn.setText("Added: "+nameIn.getText());
      }else if(e.getActionCommand().equals("Modify")) {
         debug("you clicked Modify Waypoint");
         //find waypoint and edit it
	 for(i = 0; i < WptLib.length; i++){
            if(toWps.getSelectedItem() == frWps.getSelectedItem()){
               if(WptLib[i].name == toWps.getSelectedItem()) {
                  ele = Double.parseDouble(eleIn.getText());
                  lat = Double.parseDouble(latIn.getText());
                  lon = Double.parseDouble(lonIn.getText());
                  modWpt = new Waypoint(nameIn.getText(), addrIn.getText(), ele, lat, lon);
                  WptLib[i] = modWpt;
                  break;
               }
            }
         }
         nameIn.setText("name");
	 addrIn.setText("addr");
	 eleIn.setText("ele");
         latIn.setText("lat");
         lonIn.setText("lon");
         ele = 0;
	 lat = 0;
	 lon = 0;
         print();
      }else if(e.getActionCommand().equals("Import")) {
         debug("you clicked Import Json Collection");
         //read json file
         WaypointCollection aWptLib= new WaypointCollection("waypoints.json");
	 System.out.println("line reached");
      }else if(e.getActionCommand().equals("Export")) {
         debug("you clicked Export Json Collection");
         /*System.out.println("Waypoints as json string: "+
                         WptLib.toJSONString());
         PrintWriter out = new PrintWriter("exportedWaypoints.json");
         out.println(WptLib.toJSONString());
         out.close();
         System.out.println("Done exporting group in json to waypoint.json");*/
      }else if(e.getActionCommand().equals("Distance")) {
         debug("you clicked Distance and Bearing");
      }
   }	

   private void debug(String message) {
      if (debugOn)
         System.out.println("debug: "+message);
   }

   private void print(){
      for(i = 0; i < WptLib.length; i++){
	 if(WptLib[i].name != "") {
            System.out.print(WptLib[i].name + ", ");
            System.out.print(WptLib[i].addr + ", ");
            System.out.print(WptLib[i].ele + ", ");
            System.out.print(WptLib[i].lat + ", ");
            System.out.println(WptLib[i].lon); 
         }
      }
   }

   public static void main(String args[]) {
      String host = "localhost";
      String port = "8080";
      
      try {
         if(args.length >= 2){
            host = args[0];
            port = args[1];
         }
         String url = "http://"+host+":"+port+"/";
         System.out.println("Opening connection to: "+url);
         WaypointCollectionHttpProxy wc = new WaypointCollectionHttpProxy(new URL(url));
         Controller sa2 = new Controller(name);
      }catch (Exception ex){
         ex.printStackTrace();
      }
   }
}
